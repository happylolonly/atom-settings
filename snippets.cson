# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js, .source.jsx':
  'React State Component':
    'prefix': 'mrsc'
    'body': """
      import React, { Component, PropTypes } from 'react';

      import './${1:StateComponent}.scss';


      const propTypes = {

      }

      class ${1:StateComponent} extends Component {
        constructor() {
          super();

          this.state = {

          }
        }

        render() {
          return (
            <div className="">
              ${2}
            </div>
          )
        }
      }

      ${1:StateComponent}.propTypes = propTypes;

      export default ${1:StateComponent};
    """
  'React Functional Component':
    'prefix': 'mrfc'
    'body': """
      import React, { PropTypes } from 'react';

      import './${1:FunctionalComponent}.scss';


      const propTypes = {

      }

      const ${1:FunctionalComponent} = () => {
        return (
          <div className="">
            ${2}
          </div>
        )
      }

      ${1:FunctionalComponent}.propTypes = propTypes;

      export default ${1:FunctionalComponent};
    """
  'React Container Component':
    'prefix': 'mrcc'
    'body': """
      import React, { Component, PropTypes } from 'react';
      import { connect } from 'react-redux';

      import {} from '../actions/';

      import './${1:ContainerComponent}';


      const propTypes = {

      }

      class ${1:ContainerComponent} extends Component {
        constructor() {
          super();

          this.state = {

          }
        }

        render() {
          return (
            <div className="">
              ${2}
            </div>
          )
        }
      }

      ${1:ContainerComponent}.propTypes = propTypes;

      const mapStateToProps = (state) => {
        const {} = state;
        return {

        }
      }

      export default connect(mapStateToProps, {})(${1:ContainerComponent});
    """
  'console.log':
    'prefix': 'cl'
    'body': """
      console.log(${1});${2}
    """
  'console.info':
    'prefix': 'ci'
    'body': """
      console.info(${1});${2}
    """
  'console.error':
    'prefix': 'ce'
    'body': """
      console.error(${1});${2}
    """
  'request':
    'prefix': 'req'
    'body': """
      axios.get(`${API}/${1}`)
        .then(data => {
          ${2}
        })
        .catch(error => {
          console.log(error);
        })
    """
